variables:
  # Work in one directory
  bb5_build_dir: pipeline

  # This will be overwritten in the first job only to provide the proper
  # checkout and setup
  GIT_STRATEGY: none
  # Try to force a simpler directory structure
  GIT_CLONE_PATH: ${CI_BUILDS_DIR}/${BB5_PIPELINE_ID}/src

  SPACK_ROOT: spack # ${CI_BUILDS_DIR/${BB5_PIPELINE_ID}/spack

  DATADIR: /gpfs/bbp.cscs.ch/project/proj12/jenkins

  SALLOC_ACCOUNT: proj12
  SBATCH_ACCOUNT: proj12
  SLURM_ACCOUNT: proj12

  SALLOC_PARTITION: prod
  SBATCH_PARTITION: prod
  SLURM_PARTITION: prod

spack_setup:
  stage: .pre
  tags:
    - bb5
  variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - git clone --depth 1 --single-branch https://github.com/BlueBrain/spack.git "${SPACK_ROOT}"
    - cp /gpfs/bbp.cscs.ch/ssd/apps/hpc/jenkins/config/*.yaml "${SPACK_ROOT}/etc/spack"
    - . "${SPACK_ROOT}/share/spack/setup-env.sh"
    - spack env create blargh
    - spack env activate blargh
    - spack add ${SPACK_PACKAGE}@develop${SPACK_SPEC}
    - spack develop -p ${PWD} --no-clone ${SPACK_PACKAGE}@develop${SPACK_SPEC}

spack_build:
  stage: build
  tags:
    - bb5
  script:
    - unset $(env|awk -F= '/^(PMI|SLURM)_/ {if (match($1, "_(ACCOUNT|PARTITION)$")==0) print $1}')
    - . "${SPACK_ROOT}/share/spack/setup-env.sh"
    - spack env activate blargh
    # Git is needed, otherwise the shitty RH version fails
    - module load unstable git
    - spack install --log-format=junit --log-file=install.xml
  artifacts:
    when: always
    paths:
      - install.xml
    reports:
      junit:
        - install.xml

.spack_test:
  stage: test
  tags:
    - bb5
  before_script:
    - unset $(env|awk -F= '/^(PMI|SLURM)_/ {if (match($1, "_(ACCOUNT|PARTITION)$")==0) print $1}')
    - . "${SPACK_ROOT}/share/spack/setup-env.sh"
    - spack env activate blargh
  script:
    - mkdir test_${CI_JOB_NAME}
    - cd test_${CI_JOB_NAME}
    - sh ../.ci/test_${CI_JOB_NAME}.sh
